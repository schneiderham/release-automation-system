name: Release Automation System

on:
  release:
    types: [published]

env:
  NODE_VERSION: '18'

jobs:
  # Main orchestration job that coordinates all release automation tasks
  process-release:
    name: Process Release and Notify Stakeholders
    runs-on: ubuntu-latest
    
    # Only run for non-draft, non-prerelease releases
    if: github.event.release.draft == false && github.event.release.prerelease == false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for release analysis
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci --only=production
          npm install -g @actions/core
      
      - name: Parse release data
        id: parse-release
        run: |
          echo "Parsing release data..."
          node scripts/parse-release-data.js
        env:
          RELEASE_TITLE: ${{ github.event.release.name }}
          RELEASE_BODY: ${{ github.event.release.body }}
          RELEASE_TAG: ${{ github.event.release.tag_name }}
          RELEASE_URL: ${{ github.event.release.html_url }}
          RELEASE_ID: ${{ github.event.release.id }}
      
      - name: Validate release data
        id: validate
        run: |
          echo "Validating release data..."
          node scripts/validate-release.js
        env:
          CUSTOMER_EMAILS: ${{ steps.parse-release.outputs.customer_emails }}
          JIRA_TICKETS: ${{ steps.parse-release.outputs.jira_tickets }}
          RELEASE_TYPE: ${{ steps.parse-release.outputs.release_type }}
      
      - name: Process release content
        id: process-content
        run: |
          echo "Processing release content..."
          node scripts/process-release-content.js
        env:
          RELEASE_BODY: ${{ github.event.release.body }}
          RELEASE_TITLE: ${{ github.event.release.name }}
          RELEASE_TYPE: ${{ steps.parse-release.outputs.release_type }}
      
      - name: Send customer emails
        id: send-emails
        if: steps.validate.outputs.is_valid == 'true' && steps.parse-release.outputs.customer_emails != ''
        run: |
          echo "Sending customer emails..."
          node scripts/send-customer-emails.js
        env:
          CUSTOMER_EMAILS: ${{ steps.parse-release.outputs.customer_emails }}
          EMAIL_SUBJECT: ${{ steps.process-content.outputs.email_subject }}
          EMAIL_BODY: ${{ steps.process-content.outputs.email_body }}
          RELEASE_URL: ${{ github.event.release.html_url }}
          RELEASE_TAG: ${{ github.event.release.tag_name }}
          GMAIL_CLIENT_ID: ${{ secrets.GMAIL_CLIENT_ID }}
          GMAIL_CLIENT_SECRET: ${{ secrets.GMAIL_CLIENT_SECRET }}
          GMAIL_REFRESH_TOKEN: ${{ secrets.GMAIL_REFRESH_TOKEN }}
          DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
      
      - name: Update Jira tickets
        id: update-jira
        if: steps.validate.outputs.is_valid == 'true' && steps.parse-release.outputs.jira_tickets != ''
        run: |
          echo "Updating Jira tickets..."
          node scripts/update-jira-tickets.js
        env:
          JIRA_TICKETS: ${{ steps.parse-release.outputs.jira_tickets }}
          RELEASE_TITLE: ${{ github.event.release.name }}
          RELEASE_URL: ${{ github.event.release.html_url }}
          RELEASE_TAG: ${{ github.event.release.tag_name }}
          BUSINESS_IMPACT: ${{ steps.process-content.outputs.business_impact }}
          TECHNICAL_CHANGES: ${{ steps.process-content.outputs.technical_changes }}
          CUSTOMER_EMAILS: ${{ steps.parse-release.outputs.customer_emails }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
      
      - name: Sync files to Google Drive (Optional)
        id: sync-drive
        if: steps.validate.outputs.is_valid == 'true' && steps.parse-release.outputs.has_files == 'true'
        run: |
          echo "Syncing files to Google Drive..."
          node scripts/sync-to-drive.js
        env:
          RELEASE_TAG: ${{ github.event.release.tag_name }}
          RELEASE_TITLE: ${{ github.event.release.name }}
          GOOGLE_DRIVE_CREDENTIALS: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
          DRIVE_FOLDER_ID: ${{ secrets.DRIVE_FOLDER_ID }}
      
      - name: Send team notifications
        id: team-notify
        if: always()
        run: |
          echo "Sending team notifications..."
          node scripts/send-team-notifications.js
        env:
          RELEASE_TITLE: ${{ github.event.release.name }}
          RELEASE_URL: ${{ github.event.release.html_url }}
          RELEASE_TAG: ${{ github.event.release.tag_name }}
          EMAIL_STATUS: ${{ steps.send-emails.outputs.status }}
          JIRA_STATUS: ${{ steps.update-jira.outputs.status }}
          DRIVE_STATUS: ${{ steps.sync-drive.outputs.status }}
          GOOGLE_CHAT_WEBHOOK_URL: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
      
      - name: Create summary report
        id: summary
        if: always()
        run: |
          echo "Creating summary report..."
          node scripts/create-summary-report.js
        env:
          RELEASE_TITLE: ${{ github.event.release.name }}
          RELEASE_URL: ${{ github.event.release.html_url }}
          EMAIL_STATUS: ${{ steps.send-emails.outputs.status }}
          JIRA_STATUS: ${{ steps.update-jira.outputs.status }}
          DRIVE_STATUS: ${{ steps.sync-drive.outputs.status }}
          CUSTOMER_EMAILS: ${{ steps.parse-release.outputs.customer_emails }}
          JIRA_TICKETS: ${{ steps.parse-release.outputs.jira_tickets }}
      
      - name: Handle failures
        if: failure()
        run: |
          echo "Workflow failed - sending alert..."
          node scripts/handle-failure.js
        env:
          RELEASE_TITLE: ${{ github.event.release.name }}
          RELEASE_URL: ${{ github.event.release.html_url }}
          GOOGLE_CHAT_WEBHOOK_URL: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}

  # Optional: Create GitHub issue for failed releases
  create-failure-issue:
    name: Create Issue for Failed Release
    runs-on: ubuntu-latest
    if: failure() && github.event.release.draft == false && github.event.release.prerelease == false
    needs: process-release
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create failure issue
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš¨ Release Automation Failed: ${context.payload.release.name}`,
              body: `## Release Automation Failure
            
            **Release:** ${context.payload.release.name} (${context.payload.release.tag_name})
            **URL:** ${context.payload.release.html_url}
            **Time:** ${new Date().toISOString()}
            
            ### Workflow Details
            - **Workflow:** ${context.workflow}
            - **Run ID:** ${context.runId}
            - **Run URL:** https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
            
            ### Next Steps
            1. Check the workflow logs for detailed error information
            2. Verify all required secrets are properly configured
            3. Test the release automation manually if needed
            4. Update this issue with resolution details
            
            ### Required Secrets Check
            - [ ] GMAIL_CLIENT_ID
            - [ ] GMAIL_CLIENT_SECRET  
            - [ ] GMAIL_REFRESH_TOKEN
            - [ ] JIRA_API_TOKEN
            - [ ] JIRA_USER_EMAIL
            - [ ] JIRA_BASE_URL
            - [ ] DEFAULT_FROM_EMAIL
            `,
              labels: ['release-automation', 'failure', 'urgent']
            });
            
            console.log(`Created issue #${issue.number} for failed release automation`);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 