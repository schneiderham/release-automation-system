name: Release Processing

on:
  release:
    types: [published]

env:
  NODE_VERSION: '18'

jobs:
  process-release:
    name: Process Release and Notify Stakeholders
    runs-on: ubuntu-latest
    
    # Only run for non-draft, non-prerelease releases
    if: github.event.release.draft == false && github.event.release.prerelease == false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --only=production
      
      - name: Parse release data
        id: parse-release
        run: |
          echo "Parsing release data..."
          node scripts/parse-release-data.js
        env:
          RELEASE_TITLE: ${{ github.event.release.name }}
          RELEASE_BODY: ${{ github.event.release.body }}
          RELEASE_TAG: ${{ github.event.release.tag_name }}
          RELEASE_URL: ${{ github.event.release.html_url }}
          RELEASE_ID: ${{ github.event.release.id }}
      
      - name: Validate release data
        id: validate
        run: |
          echo "Validating release data..."
          node scripts/validate-release.js
        env:
          CUSTOMER_EMAILS: ${{ steps.parse-release.outputs.customer_emails }}
          JIRA_TICKETS: ${{ steps.parse-release.outputs.jira_tickets }}
          RELEASE_TYPE: ${{ steps.parse-release.outputs.release_type }}
          RELEASE_BODY: ${{ github.event.release.body }}

      - name: Send PO release email
        id: send-po-email
        if: steps.validate.outputs.is_valid == 'true'
        run: |
          echo "Sending PO release email..."
          node scripts/send_po_release_email.js && echo "PO release email sent successfully." || echo "Failed to send PO release email."
        env:
          GMAIL_CLIENT_ID: ${{ secrets.GMAIL_CLIENT_ID }}
          GMAIL_CLIENT_SECRET: ${{ secrets.GMAIL_CLIENT_SECRET }}
          GMAIL_REFRESH_TOKEN: ${{ secrets.GMAIL_REFRESH_TOKEN }}
          DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
          RELEASE_TITLE: ${{ github.event.release.name }}
          RELEASE_BODY: ${{ github.event.release.body }}
          RELEASE_TAG: ${{ github.event.release.tag_name }}
          RELEASE_URL: ${{ github.event.release.html_url }}
          RELEASE_TYPE: ${{ steps.parse-release.outputs.release_type }}
          PROJECT_NAME: ${{ steps.parse-release.outputs.project_name }}

      # TODO: Enable this step when ready to use Jira API for custom comments/automation
      # - name: Post release comment in Jira
      #   id: jira-release-comment
      #   if: steps.validate.outputs.is_valid == 'true' && steps.parse-release.outputs.jira_tickets != ''
      #   run: |
      #     echo "Posting release comment in Jira..."
      #     node scripts/jira_release_update.js && echo "Jira release comment posted successfully." || echo "Failed to post Jira release comment."
      #   env:
      #     JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      #     JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
      #     JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
      #     RELEASE_TITLE: ${{ github.event.release.name }}
      #     RELEASE_URL: ${{ github.event.release.html_url }}
      #     RELEASE_TAG: ${{ github.event.release.tag_name }}
      #     RELEASE_BODY: ${{ github.event.release.body }}
      #     RELEASE_AUTHOR: ${{ github.event.release.author.login }}
      #     FILE_MANIFEST: ${{ steps.parse-release.outputs.file_manifest }}

      # TODO: Enable this step when ready to use Jira API for ticket updates/automation
      # - name: Update Jira tickets
      #   id: update-jira
      #   if: steps.validate.outputs.is_valid == 'true' && steps.parse-release.outputs.jira_tickets != ''
      #   run: |
      #     echo "Updating Jira tickets..."
      #     node scripts/update-jira-tickets.js
      #   env:
      #     JIRA_TICKETS: ${{ steps.parse-release.outputs.jira_tickets }}
      #     RELEASE_TITLE: ${{ github.event.release.name }}
      #     RELEASE_URL: ${{ github.event.release.html_url }}
      #     RELEASE_TAG: ${{ github.event.release.tag_name }}
      #     BUSINESS_IMPACT: ${{ steps.parse-release.outputs.business_impact }}
      #     TECHNICAL_CHANGES: ${{ steps.parse-release.outputs.technical_changes }}
      #     JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      #     JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
      #     JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
      
      - name: Send email to PO
        id: send-email
        if: steps.validate.outputs.is_valid == 'true'
        run: |
          echo "Sending email to Product Owner..."
          node scripts/send-customer-emails.js
        env:
          CUSTOMER_EMAILS: ${{ steps.parse-release.outputs.customer_emails }}
          RELEASE_TITLE: ${{ github.event.release.name }}
          RELEASE_URL: ${{ github.event.release.html_url }}
          RELEASE_TAG: ${{ github.event.release.tag_name }}
          GMAIL_CLIENT_ID: ${{ secrets.GMAIL_CLIENT_ID }}
          GMAIL_CLIENT_SECRET: ${{ secrets.GMAIL_CLIENT_SECRET }}
          GMAIL_REFRESH_TOKEN: ${{ secrets.GMAIL_REFRESH_TOKEN }}
          DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
      
      - name: Create summary report
        id: summary
        if: always()
        run: |
          echo "## Release Processing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** ${{ github.event.release.name }} (${{ github.event.release.tag_name }})" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ github.event.release.html_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Valid:** ${{ steps.validate.outputs.is_valid }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Jira Tickets:** ${{ steps.parse-release.outputs.jira_tickets }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Customer Emails:** ${{ steps.parse-release.outputs.customer_emails }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Processing Results" >> $GITHUB_STEP_SUMMARY
          echo "- **PO Release Email:** ${{ steps.send-po-email.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Jira Release Comment:** ${{ steps.jira-release-comment.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Jira Update:** ${{ steps.update-jira.outputs.status || 'Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Email Sent:** ${{ steps.send-email.outputs.status || 'Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.validate.outputs.is_valid }}" != "true" ]; then
            echo "❌ **Release validation failed**" >> $GITHUB_STEP_SUMMARY
            echo "Please check the release format and required fields." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Release processed successfully**" >> $GITHUB_STEP_SUMMARY
          fi 